// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/mini_java.flex

/* MiniJava Lexer usando Token diretamente */
import utils.Token;
import utils.Symbol;

@SuppressWarnings("fallthrough")
public class MiniJava {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\3\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\7\21\2\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\6\31\21\32"+
    "\1\33\2\32\1\34\1\35\1\36\1\0\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\51\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\2\51\1\67\1\70\1\71\7\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\17\26"+
    "\1\27\1\1\1\30\1\31\1\0\1\32\1\0\1\33"+
    "\3\0\1\2\1\14\1\0\1\34\1\35\1\36\4\26"+
    "\1\37\4\26\1\40\17\26\1\41\1\42\1\0\1\14"+
    "\7\26\1\43\1\26\1\44\2\26\1\45\12\26\1\2"+
    "\4\26\1\46\3\26\1\47\1\26\1\50\5\26\1\51"+
    "\1\52\1\53\2\26\1\54\1\23\2\26\1\55\6\26"+
    "\1\56\1\57\3\26\1\60\1\61\1\26\1\62\1\63"+
    "\1\64\1\65\1\26\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u0196\0\u01d0"+
    "\0\u020a\0\72\0\72\0\u0244\0\u027e\0\u02b8\0\72\0\u02f2"+
    "\0\72\0\72\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\72\0\u0692\0\72\0\72\0\350\0\72\0\u06cc"+
    "\0\72\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\72"+
    "\0\72\0\72\0\u0862\0\u089c\0\u08d6\0\u0910\0\u032c\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u032c\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\72\0\72\0\u0d98\0\u0828\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u032c\0\u0f68"+
    "\0\u032c\0\u0fa2\0\u0fdc\0\u032c\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\72\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u032c\0\u1342\0\u137c\0\u13b6\0\u032c"+
    "\0\u13f0\0\u032c\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u032c"+
    "\0\u032c\0\u032c\0\u154c\0\u1586\0\u032c\0\u032c\0\u15c0\0\u15fa"+
    "\0\u032c\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u032c"+
    "\0\u032c\0\u1790\0\u17ca\0\u1804\0\u032c\0\u032c\0\u183e\0\u032c"+
    "\0\u032c\0\u032c\0\u032c\0\u1878\0\u032c\0\u032c\0\u032c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\21\1\22\1\23\1\24\1\25\1\26\1\27\3\30"+
    "\1\31\1\2\1\32\2\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\33\1\41\3\33\1\42\1\43\1\33\1\44"+
    "\1\45\1\46\1\47\1\33\1\50\1\51\1\33\1\52"+
    "\1\53\1\54\73\0\2\3\115\0\1\55\43\0\5\56"+
    "\1\57\27\56\1\60\34\56\6\0\1\61\63\0\7\62"+
    "\1\0\25\62\1\63\34\62\12\0\1\64\4\0\1\65"+
    "\72\0\2\66\11\0\1\67\32\0\1\67\23\0\3\21"+
    "\75\0\1\70\71\0\1\71\71\0\1\72\63\0\3\30"+
    "\6\0\3\30\3\0\1\33\27\30\23\0\3\33\6\0"+
    "\3\33\3\0\30\33\23\0\3\33\6\0\3\33\3\0"+
    "\17\33\1\73\1\33\1\74\6\33\23\0\3\33\6\0"+
    "\3\33\3\0\14\33\1\75\2\33\1\76\10\33\23\0"+
    "\3\33\6\0\3\33\3\0\17\33\1\77\10\33\23\0"+
    "\3\33\6\0\3\33\3\0\14\33\1\100\12\33\1\101"+
    "\23\0\3\33\6\0\3\33\3\0\1\33\1\102\15\33"+
    "\1\103\10\33\23\0\3\33\6\0\3\33\3\0\6\33"+
    "\1\104\6\33\1\105\1\106\11\33\23\0\3\33\6\0"+
    "\3\33\3\0\1\33\1\107\26\33\23\0\3\33\6\0"+
    "\3\33\3\0\1\33\1\110\3\33\1\111\16\33\1\112"+
    "\3\33\23\0\3\33\6\0\3\33\3\0\1\33\1\113"+
    "\22\33\1\114\3\33\23\0\3\33\6\0\3\33\3\0"+
    "\5\33\1\115\22\33\23\0\3\33\6\0\3\33\3\0"+
    "\23\33\1\116\1\117\3\33\23\0\3\33\6\0\3\33"+
    "\3\0\10\33\1\120\10\33\1\121\6\33\23\0\3\33"+
    "\6\0\3\33\3\0\17\33\1\122\10\33\23\0\3\33"+
    "\6\0\3\33\3\0\10\33\1\123\17\33\73\0\1\124"+
    "\6\0\1\56\1\0\1\56\25\0\1\56\3\0\1\56"+
    "\3\0\1\56\7\0\1\56\2\0\1\56\1\0\1\56"+
    "\16\0\1\125\67\0\1\62\1\0\1\62\25\0\1\62"+
    "\3\0\1\62\3\0\1\62\7\0\1\62\2\0\1\62"+
    "\1\0\1\62\7\0\12\64\1\126\57\64\2\65\2\0"+
    "\66\65\20\0\2\66\70\0\3\127\6\0\1\127\6\0"+
    "\6\127\44\0\3\33\6\0\3\33\3\0\17\33\1\130"+
    "\10\33\23\0\3\33\6\0\3\33\3\0\5\33\1\131"+
    "\22\33\23\0\3\33\6\0\3\33\3\0\1\33\1\132"+
    "\26\33\23\0\3\33\6\0\3\33\3\0\16\33\1\133"+
    "\11\33\23\0\3\33\6\0\3\33\3\0\22\33\1\134"+
    "\5\33\23\0\3\33\6\0\3\33\3\0\23\33\1\135"+
    "\4\33\23\0\3\33\6\0\3\33\3\0\14\33\1\136"+
    "\13\33\23\0\3\33\6\0\3\33\3\0\21\33\1\137"+
    "\6\33\23\0\3\33\6\0\3\33\3\0\20\33\1\140"+
    "\7\33\23\0\3\33\6\0\3\33\3\0\23\33\1\141"+
    "\4\33\23\0\3\33\6\0\3\33\3\0\11\33\1\142"+
    "\16\33\23\0\3\33\6\0\3\33\3\0\23\33\1\143"+
    "\4\33\23\0\3\33\6\0\3\33\3\0\26\33\1\144"+
    "\1\33\23\0\3\33\6\0\3\33\3\0\14\33\1\145"+
    "\13\33\23\0\3\33\6\0\3\33\3\0\3\33\1\146"+
    "\24\33\23\0\3\33\6\0\3\33\3\0\2\33\1\147"+
    "\25\33\23\0\3\33\6\0\3\33\3\0\23\33\1\150"+
    "\4\33\23\0\3\33\6\0\3\33\3\0\1\33\1\151"+
    "\26\33\23\0\3\33\6\0\3\33\3\0\20\33\1\152"+
    "\7\33\23\0\3\33\6\0\3\33\3\0\11\33\1\153"+
    "\16\33\23\0\3\33\6\0\3\33\3\0\24\33\1\154"+
    "\3\33\23\0\3\33\6\0\3\33\3\0\11\33\1\155"+
    "\16\33\23\0\3\33\6\0\3\33\3\0\11\33\1\156"+
    "\16\33\3\0\12\64\1\126\4\64\1\157\52\64\20\0"+
    "\3\33\6\0\3\33\3\0\14\33\1\160\13\33\23\0"+
    "\3\33\6\0\3\33\3\0\1\33\1\161\26\33\23\0"+
    "\3\33\6\0\3\33\3\0\22\33\1\162\5\33\23\0"+
    "\3\33\6\0\3\33\3\0\23\33\1\163\4\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\164\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\165\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\22\33\1\166\5\33\23\0"+
    "\3\33\6\0\3\33\3\0\17\33\1\167\10\33\23\0"+
    "\3\33\6\0\3\33\3\0\16\33\1\170\11\33\23\0"+
    "\3\33\6\0\3\33\3\0\11\33\1\171\16\33\23\0"+
    "\3\33\6\0\3\33\3\0\14\33\1\172\13\33\23\0"+
    "\3\33\6\0\3\33\3\0\13\33\1\173\14\33\23\0"+
    "\3\33\6\0\3\33\3\0\14\33\1\174\13\33\23\0"+
    "\3\33\6\0\3\33\3\0\24\33\1\175\3\33\23\0"+
    "\3\33\6\0\3\33\3\0\23\33\1\176\4\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\177\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\22\33\1\200\5\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\201\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\4\33\1\202\23\33\23\0"+
    "\3\33\6\0\3\33\3\0\14\33\1\203\13\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\204\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\13\33\1\205\14\33\23\0"+
    "\3\33\6\0\3\33\3\0\22\33\1\206\5\33\23\0"+
    "\3\33\6\0\3\33\3\0\11\33\1\207\16\33\23\0"+
    "\3\33\6\0\3\33\3\0\16\33\1\210\11\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\211\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\21\33\1\212\6\33\23\0"+
    "\3\33\6\0\3\33\3\0\25\33\1\213\2\33\23\0"+
    "\3\33\6\0\3\33\3\0\1\33\1\214\26\33\23\0"+
    "\3\33\6\0\3\33\3\0\11\33\1\215\16\33\23\0"+
    "\3\33\6\0\3\33\3\0\21\33\1\216\6\33\23\0"+
    "\3\33\6\0\3\33\3\0\11\33\1\217\16\33\23\0"+
    "\3\33\6\0\3\33\3\0\21\33\1\220\6\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\221\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\1\33\1\222\26\33\23\0"+
    "\3\33\6\0\3\33\3\0\16\33\1\223\11\33\23\0"+
    "\3\33\6\0\3\33\3\0\4\33\1\224\23\33\23\0"+
    "\3\33\6\0\3\33\3\0\23\33\1\225\4\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\226\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\7\33\1\227\20\33\23\0"+
    "\3\33\6\0\3\33\3\0\3\33\1\230\24\33\23\0"+
    "\3\33\6\0\3\33\3\0\16\33\1\231\11\33\23\0"+
    "\3\33\6\0\3\33\3\0\3\33\1\232\24\33\23\0"+
    "\3\33\6\0\3\33\3\0\16\33\1\233\11\33\23\0"+
    "\3\33\6\0\3\33\3\0\24\33\1\234\3\33\23\0"+
    "\3\33\6\0\3\33\3\0\22\33\1\235\5\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\236\22\33\23\0"+
    "\3\33\6\0\3\33\3\0\5\33\1\237\22\33\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6322];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\7\11\3\1\2\11\3\1\1\11"+
    "\1\1\2\11\17\1\1\11\1\1\2\11\1\0\1\11"+
    "\1\0\1\11\3\0\2\1\1\0\3\11\31\1\2\11"+
    "\1\0\30\1\1\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniJava(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(Symbol.EOF, yyline+1, yycolumn+1);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Caractere inválido: " + yytext() +
                       " na linha " + (yyline+1) +
                       ", coluna " + (yycolumn+1)); 
    return new Token(Symbol.ERRO, yyline+1, yycolumn+1);
            }
          // fall through
          case 57: break;
          case 2:
            { /* ignora */
            }
          // fall through
          case 58: break;
          case 3:
            { return new Token(Symbol.NAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 59: break;
          case 4:
            { return new Token(Symbol.ABRE_PARENTESES, yyline+1, yycolumn+1);
            }
          // fall through
          case 60: break;
          case 5:
            { return new Token(Symbol.FECHA_PARENTESES, yyline+1, yycolumn+1);
            }
          // fall through
          case 61: break;
          case 6:
            { return new Token(Symbol.MULTIPLICACAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 62: break;
          case 7:
            { return new Token(Symbol.ADICAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 63: break;
          case 8:
            { return new Token(Symbol.VIRGULA, yyline+1, yycolumn+1);
            }
          // fall through
          case 64: break;
          case 9:
            { return new Token(Symbol.SUBTRACAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 65: break;
          case 10:
            { return new Token(Symbol.PONTO, yyline+1, yycolumn+1);
            }
          // fall through
          case 66: break;
          case 11:
            { return new Token(Symbol.DIVISAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 67: break;
          case 12:
            { return new Token(Symbol.INTEGER, Integer.decode(yytext()), yyline+1, yycolumn+1);
            }
          // fall through
          case 68: break;
          case 13:
            { return new Token(Symbol.DOIS_PONTOS, yyline+1, yycolumn+1);
            }
          // fall through
          case 69: break;
          case 14:
            { return new Token(Symbol.PONTO_VIRGULA, yyline+1, yycolumn+1);
            }
          // fall through
          case 70: break;
          case 15:
            { return new Token(Symbol.MENOR, yyline+1, yycolumn+1);
            }
          // fall through
          case 71: break;
          case 16:
            { return new Token(Symbol.ATRIBUICAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 72: break;
          case 17:
            { return new Token(Symbol.MAIOR, yyline+1, yycolumn+1);
            }
          // fall through
          case 73: break;
          case 18:
            { return new Token(Symbol.INTERROGACAO, yyline+1, yycolumn+1);
            }
          // fall through
          case 74: break;
          case 19:
            { return new Token(Symbol.CLASS, yyline+1, yycolumn+1);
            }
          // fall through
          case 75: break;
          case 20:
            { return new Token(Symbol.ABRE_COLCHETES, yyline+1, yycolumn+1);
            }
          // fall through
          case 76: break;
          case 21:
            { return new Token(Symbol.FECHA_COLCHETES, yyline+1, yycolumn+1);
            }
          // fall through
          case 77: break;
          case 22:
            { return new Token(Symbol.ID, yytext(), yyline+1, yycolumn+1);
            }
          // fall through
          case 78: break;
          case 23:
            { return new Token(Symbol.ABRE_CHAVES, yyline+1, yycolumn+1);
            }
          // fall through
          case 79: break;
          case 24:
            { return new Token(Symbol.FECHA_CHAVES, yyline+1, yycolumn+1);
            }
          // fall through
          case 80: break;
          case 25:
            { return new Token(Symbol.DIFERENTE, yyline+1, yycolumn+1);
            }
          // fall through
          case 81: break;
          case 26:
            { return new Token(Symbol.STRING, yytext().substring(1, yytext().length()-1), yyline+1, yycolumn+1);
            }
          // fall through
          case 82: break;
          case 27:
            { return new Token(Symbol.E, yyline+1, yycolumn+1);
            }
          // fall through
          case 83: break;
          case 28:
            { return new Token(Symbol.MENOR_OU_IGUAL, yyline+1, yycolumn+1);
            }
          // fall through
          case 84: break;
          case 29:
            { return new Token(Symbol.IGUAL, yyline+1, yycolumn+1);
            }
          // fall through
          case 85: break;
          case 30:
            { return new Token(Symbol.MAIOR_OU_IGUAL, yyline+1, yycolumn+1);
            }
          // fall through
          case 86: break;
          case 31:
            { return new Token(Symbol.DO, yyline+1, yycolumn+1);
            }
          // fall through
          case 87: break;
          case 32:
            { return new Token(Symbol.IF, yyline+1, yycolumn+1);
            }
          // fall through
          case 88: break;
          case 33:
            { return new Token(Symbol.OU, yyline+1, yycolumn+1);
            }
          // fall through
          case 89: break;
          case 34:
            { return new Token(Symbol.CHAR, yytext().charAt(1), yyline+1, yycolumn+1);
            }
          // fall through
          case 90: break;
          case 35:
            { return new Token(Symbol.FOR, yyline+1, yycolumn+1);
            }
          // fall through
          case 91: break;
          case 36:
            { return new Token(Symbol.INT, yyline+1, yycolumn+1);
            }
          // fall through
          case 92: break;
          case 37:
            { return new Token(Symbol.NEW, yyline+1, yycolumn+1);
            }
          // fall through
          case 93: break;
          case 38:
            { return new Token(Symbol.ELSE, yyline+1, yycolumn+1);
            }
          // fall through
          case 94: break;
          case 39:
            { return new Token(Symbol.MAIN, yyline+1, yycolumn+1);
            }
          // fall through
          case 95: break;
          case 40:
            { return new Token(Symbol.NULL, yyline+1, yycolumn+1);
            }
          // fall through
          case 96: break;
          case 41:
            { return new Token(Symbol.THIS, yyline+1, yycolumn+1);
            }
          // fall through
          case 97: break;
          case 42:
            { return new Token(Symbol.TRUE, true, yyline+1, yycolumn+1);
            }
          // fall through
          case 98: break;
          case 43:
            { return new Token(Symbol.VOID, yyline+1, yycolumn+1);
            }
          // fall through
          case 99: break;
          case 44:
            { return new Token(Symbol.BREAK, yyline+1, yycolumn+1);
            }
          // fall through
          case 100: break;
          case 45:
            { return new Token(Symbol.FALSE, false, yyline+1, yycolumn+1);
            }
          // fall through
          case 101: break;
          case 46:
            { return new Token(Symbol.SUPER, yyline+1, yycolumn+1);
            }
          // fall through
          case 102: break;
          case 47:
            { return new Token(Symbol.WHILE, yyline+1, yycolumn+1);
            }
          // fall through
          case 103: break;
          case 48:
            { return new Token(Symbol.IMPORT, yyline+1, yycolumn+1);
            }
          // fall through
          case 104: break;
          case 49:
            { return new Token(Symbol.NATIVE, yyline+1, yycolumn+1);
            }
          // fall through
          case 105: break;
          case 50:
            { return new Token(Symbol.PUBLIC, yyline+1, yycolumn+1);
            }
          // fall through
          case 106: break;
          case 51:
            { return new Token(Symbol.RETURN, yyline+1, yycolumn+1);
            }
          // fall through
          case 107: break;
          case 52:
            { return new Token(Symbol.STATIC, yyline+1, yycolumn+1);
            }
          // fall through
          case 108: break;
          case 53:
            { return new Token(Symbol.BOOLEAN, yyline+1, yycolumn+1);
            }
          // fall through
          case 109: break;
          case 54:
            { return new Token(Symbol.EXTENDS, yyline+1, yycolumn+1);
            }
          // fall through
          case 110: break;
          case 55:
            { return new Token(Symbol.PACKAGE, yyline+1, yycolumn+1);
            }
          // fall through
          case 111: break;
          case 56:
            { return new Token(Symbol.CONTINUE, yyline+1, yycolumn+1);
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
